name: Cross-Platform Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            name: Linux
            install_deps: sudo apt-get update && sudo apt-get install -y libopencv-dev cmake build-essential
            executable: ellipse_detector
            artifact_name: ellipse-detector-linux-x64
          - os: windows-latest
            name: Windows
            install_deps: echo "Dependencies handled by vcpkg setup step"
            executable: ellipse_detector.exe
            artifact_name: ellipse-detector-windows-x64
          - os: macos-latest
            name: macOS
            install_deps: brew install opencv
            executable: ellipse_detector
            artifact_name: ellipse-detector-macos-x64

    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.name }}

    steps:
    - uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache
          ~/vcpkg
          /usr/local
        key: ${{ runner.os }}-deps-${{ hashFiles('**/Makefile', '**/CMakeLists.txt') }}

    - name: Install dependencies
      run: ${{ matrix.install_deps }}

    - name: Setup vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '5568f110b509a9fd90711978a7cb76bae75bb092'

    - name: Install OpenCV with vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg install opencv4:x64-windows
        echo "Checking vcpkg installation..."
        vcpkg list | grep opencv
        echo "Listing installed files..."
        dir "vcpkg/installed/x64-windows/include" /s | findstr opencv || echo "OpenCV headers not found in expected location"

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Setting up CMake with vcpkg toolchain..."
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE="${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TOOLCHAIN=ON

    - name: Build with Make (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        make clean
        make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)

    - name: Build with CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test executable (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        # Test if executable exists and runs
        if [ -f "./ellipse_detector" ]; then
          echo "✅ Executable created successfully"
          # Test with help flag (should exit gracefully)
          timeout 10 ./ellipse_detector --help 2>/dev/null || echo "✅ Program runs (expected exit)"
        else
          echo "❌ Executable not found"
          exit 1
        fi

    - name: Test executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path "${{github.workspace}}/build/${{env.BUILD_TYPE}}/ellipse_detector.exe") {
          Write-Host "✅ Executable created successfully"
        } else {
          Write-Host "❌ Executable not found"
          exit 1
        }

    - name: Prepare artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p artifacts
        cp ellipse_detector artifacts/
        cp README.md artifacts/ 2>/dev/null || echo "README.md not found"
        cp LICENSE artifacts/ 2>/dev/null || echo "LICENSE not found"

    - name: Prepare artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        New-Item -ItemType Directory -Force -Path artifacts
        Copy-Item "${{github.workspace}}/build/${{env.BUILD_TYPE}}/ellipse_detector.exe" artifacts/
        Copy-Item "README.md" artifacts/ -ErrorAction SilentlyContinue
        Copy-Item "LICENSE" artifacts/ -ErrorAction SilentlyContinue

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/
        retention-days: 30

  test:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: Test on ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install OpenCV
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update && sudo apt-get install -y libopencv-dev
        else
          brew install opencv
        fi

    - name: Build
      run: |
        make clean
        make

    - name: Run basic tests
      run: |
        echo "Running basic functionality tests..."
        
        # Test 1: Check if executable exists
        if [ -f "./ellipse_detector" ]; then
          echo "✅ Test 1 passed: Executable exists"
        else
          echo "❌ Test 1 failed: Executable not found"
          exit 1
        fi
        
        # Test 2: Test with sample image
        if [ -f "image.png" ]; then
          echo "Testing with sample image..."
          timeout 30 ./ellipse_detector image.png > test_output.log 2>&1 || true
          if grep -q "Total:" test_output.log; then
            echo "✅ Test 2 passed: Program processes image successfully"
          else
            echo "⚠️  Test 2 warning: Program ran but output format unexpected"
            cat test_output.log
          fi
        else
          echo "⚠️  Test 2 skipped: No sample image found"
        fi
        
        echo "✅ All basic tests completed"

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build, test]
    runs-on: ubuntu-latest
    name: Create Release

    steps:
    - uses: actions/checkout@v4
    
    - name: Generate version number
      id: version
      run: |
        # Generate version based on date and commit
        VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release archives
      run: |
        for dir in ellipse-detector-*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            if [[ "$dir" == *"windows"* ]]; then
              zip -r "../${dir}-${{ steps.version.outputs.version }}.zip" .
            else
              tar -czf "../${dir}-${{ steps.version.outputs.version }}.tar.gz" .
            fi
            cd ..
          fi
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: "Ellipse Detector CMED v${{ steps.version.outputs.version }}"
        body: |
          ## 🚀 Auto Release v${{ steps.version.outputs.version }}
          
          ### ✨ What's Included
          - **Windows x64**: `ellipse-detector-windows-x64-${{ steps.version.outputs.version }}.zip`
          - **Linux x64**: `ellipse-detector-linux-x64-${{ steps.version.outputs.version }}.tar.gz`  
          - **macOS x64**: `ellipse-detector-macos-x64-${{ steps.version.outputs.version }}.tar.gz`
          
          ### 🔧 Recent Changes
          - Fixed Windows compilation with vcpkg and OpenCV4
          - Improved ellipse detection parameter tuning
          - Enhanced cross-platform compatibility
          - Resolved segmentation fault issues
          
          ### 💻 Usage
          ```bash
          # Extract and run
          ./ellipse_detector images/your_image.jpg
          ```
          
          ### 📊 Build Status
          - ✅ **Windows**: Built with CMake + MSVC + vcpkg
          - ✅ **Linux**: Built with Make + GCC  
          - ✅ **macOS**: Built with Make + Clang
          
          ---
          *Auto-generated from commit ${{ github.sha }}*
        files: |
          ellipse-detector-linux-x64-${{ steps.version.outputs.version }}.tar.gz
          ellipse-detector-windows-x64-${{ steps.version.outputs.version }}.zip
          ellipse-detector-macos-x64-${{ steps.version.outputs.version }}.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
